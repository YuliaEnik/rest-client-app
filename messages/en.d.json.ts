// This file is auto-generated by next-intl, do not edit directly.
// See: https://next-intl.dev/docs/workflows/typescript#messages-arguments

declare const messages: {
  LanguageSwitcher: {
    english: 'English (EN)';
    russian: 'Russian (RU)';
    belarusian: 'Belarusian (BE)';
  };
  welcomePage: {
    description_restAppText: 'A powerful REST API integrated development environment (IDE). This tool provides everything you need to build, test, and debug RESTful services. Key features: smart code completion, interactive API testing, built-in documentation, and team collaboration support. Perfect for developers, testers, and API architects.';
    description_ourTeamText: 'Our team consists of experienced developers specializing in modern web applications. We use cutting-edge technologies and best development practices. Each team member contributes to creating a high-quality product. Our specializations include: frontend, UX/UI design, and testing.';
    title_main: {
      rest: 'REST Client App';
      team: 'Our Team';
    };
    title1: 'WEB Developers of our team';
    title2: ' We may not have much experience, but we are wearing navy stripes!';
    tabs: {
      rest: 'Rest App';
      team: 'Team';
    };
  };
  developers: {
    nikolay: {
      name: 'Nikolay';
      task1: 'REST page';
      task2: 'Client page';
      description: "i'm the best";
    };
    anastasiya: {
      name: 'Anastasiya';
      task1: 'History page';
      task2: 'Variables page';
      description: "i'm the best too";
    };
    yuliya: {
      name: 'Julia';
      task1: 'Welcome page';
      task2: 'Localization';
      description: 'Hello, my name is Yuliya. I am a self-taught front-end developer. I primarily focus on writing clean, elegant, and efficient code. I am proficient in HTML, CSS, SCSS, JavaScript, React and Type Script. And I get real pleasure from the results of my work.';
    };
  };
  header: {
    main: 'go to main page';
    signin: 'Sign In';
    signup: 'Sign Up';
    logout: 'logout';
  };
  footer: {
    course: 'REACT';
  };
  auth: {
    signInTitle: 'Sign In';
    signUpTitle: 'Sign Up';
    displayName: 'Name';
    email: 'Email';
    password: 'Password';
    signIn: 'Sign In';
    signUp: 'Sign Up';
    signIn_description_part1: "Don't have an account,";
    signUp_description_part1: 'Already have an account,';
    signIn_description_part2: 'create an account';
    signUp_description_part2: 'log in';
    errors: {
      displayName_required: 'Display name is required';
      email_required: 'Email is required';
      email_invalid: 'Invalid email format';
      password_required: 'Password is required';
      password_min: 'Password must be at least 8 characters';
      password: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character(@#$!%*?&)';
      auth_failed: 'Authentication failed';
    };
  };
  restfulPage: {
    urlError: 'API URL must be a valid';
    send: 'Send';
    headers: 'Headers';
    addHeader: 'Add header';
    placeholderKey: 'key';
    placeholderValue: 'value';
    snippet: 'Request code snippet';
    snippetMessage: 'Please provide at least api url to generate request snippet';
    body: 'Body';
    prettify: 'Prettify';
    bodyText: 'Text';
    response: 'Response';
    status: 'Status: ';
  };
  variablesPage: {
    title: 'Variables';
    varList: 'Saved variables';
    loadingPage: 'Loading Variables Page...';
    addButton: 'New variable';
    loadSavedVars: 'Loading...';
    emptySavedVars: 'No variables saved.';
    error: 'Error';
    varNamerequired: 'Variable name is required';
    varNameMin: 'Variable name must be at least 2 characters';
    varNameMatch: 'Variable name must be on English uppercase, camelCase, or uppercase with one underscore';
    varValuerequired: 'Variable value is required';
    varValueMin: 'Variable value must be at least 1 character';
  };
  historyPage: {
    title: 'History';
    historyList: 'Previous requests';
    historyListTable: 'List of your previous requests';
    historyListTableResult: 'Total amount of requests';
    requestDate: 'Date of request';
    requestType: 'Type of request';
    requestURL: 'URL of request';
    loadingPage: 'Loading History Page...';
    loadSavedRequests: 'Loading...';
    emptySavedRequests: 'No requests saved.';
  };
};
export default messages;
